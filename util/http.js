import axios from "axios";

import { firebaseConfig } from "../firebaseConfig";
import { getStorage, ref, getDownloadURL, uploadBytes } from "firebase/storage";

async function uploadImageToStorage(imageUri) {
  try {
    const storage = getStorage();
    const fileName = `${Date.now()}_${Math.floor(Math.random() * 1000000)}.jpg`;
    const storageRef = ref(storage, "images/" + fileName);
    const response = await fetch(imageUri);
    const blob = await response.blob();
    const snapshot = await uploadBytes(storageRef, blob);
    const downloadURL = await getDownloadURL(snapshot.ref);
    return downloadURL;

  } catch (error) {
    console.error(
      "Si è verificato un errore durante il caricamento dell'immagine:",
      error
    );
  }
}

export const storePlace = async (place, token) => {
  const imageURL = await uploadImageToStorage(place.imageUri);
  place.imageUri = imageURL;
  console.log(place);
  const response = await axios.post(
    firebaseConfig.databaseURL + "/places.json?auth=" + token,
    place
  );
  const id = response.data.name; // to obtain the id generated by firebase
  return id;
};

export const fetchPlaces = async (token) => {  
  try {
    const response = await axios.get(
      firebaseConfig.databaseURL + "/places.json?auth=" + token
    );
    const places = [];
    const imagePromises = [];

    for (const key in response.data) {
      const placeData = response.data[key];
      const imagePromise = placeData.imageUri;
      imagePromises.push(imagePromise);
      const placeObj = {
        id: key,
        title: placeData.title,
        address: placeData.address,
        date: new Date(placeData.date),
        location: placeData.location,
        image: null,
        email: placeData.email,
      };
      places.push(placeObj);
    }
    const imageUrls = await Promise.all(imagePromises);
    places.forEach((place, index) => {
      place.image = imageUrls[index];
    });
    return places;

  } catch (error) {
    console.error(
      "Si è verificato un errore durante il recupero dei luoghi:",
      error
    );
    throw error;
  }
};

export const fetchSinglePlace = async (token, placeId) => {
  try {
    const response = await axios.get(
      firebaseConfig.databaseURL + `/places/${placeId}.json?auth=${token}`
    );

    const placeData = response.data;

    return {
      id: placeId,
      title: placeData.title,
      address: placeData.address,
      date: new Date(placeData.date),
      location: placeData.location,
      image: placeData.imageUri
    };
  } catch (error) {
    console.error("Errore durante il recupero del place:", error);
    throw error;
  }
}
